#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\fancyhf{}               % Clear fancy header/footer
\fancyhead[L]{Sahit Mandala, 9069858745}   % My name in Left footer
\fancyhead[R]{CS240, Section 313}  % Page number in Right footer
\makeatletter
\let\ps@plain\ps@fancy   % Plain page style = fancy page style
\makeatother
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS240: Homework 4
\end_layout

\begin_layout Author
Sahit Mandala
\end_layout

\begin_layout Section*
Problem 1
\end_layout

\begin_layout Standard
P(n) = 
\begin_inset Formula $\forall$
\end_inset

 good sequences generated from n applications of the constructor rules upon
 the foundational rule, the number of 0's in the string equals the number
 of 1's
\end_layout

\begin_layout Standard
Note that 
\begin_inset Formula $P(0)$
\end_inset

 considers only the empty sequence (e.g.
 the foundational rule construction).
\end_layout

\begin_layout Standard
We shall prove 
\begin_inset Formula $\forall n\in\mathbb{N},P(n)$
\end_inset

 using strong structural induction.
\end_layout

\begin_layout Standard

\series bold
Base case
\series default
 
\begin_inset Formula $P(0)$
\end_inset

: At iteration 0, the only good sequence to consider is the empty sequence,
 which generated by the foundational rule.
 Note that the number of 0's is 0 and the number of 1's is 0, so clearly
 the number of 0's and 1's are equal.
 Hence, we have shown the base case 
\begin_inset Formula $P(n)$
\end_inset

 at 
\begin_inset Formula $n=0$
\end_inset

.
\end_layout

\begin_layout Standard
Next, assume the strong inductive hypothesis: Given some 
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

, 
\begin_inset Formula $\forall k\in\mathbb{N}$
\end_inset

 s.t.
 
\begin_inset Formula $x\leq n$
\end_inset

, 
\begin_inset Formula $P(k)$
\end_inset

.
 That is, every good sequence generated by 
\begin_inset Formula $k$
\end_inset

 iterations of the constructor rule, with 
\begin_inset Formula $\forall k\in\mathbb{N}$
\end_inset

 s.t.
 
\begin_inset Formula $x\leq n$
\end_inset

, has the same number of 1's and 0's.
 Let us define the set S of all good sequences generated by some 
\begin_inset Formula $m\in\mathbb{N}$
\end_inset

 applications of the constructor rule, with 
\begin_inset Formula $m\leq n$
\end_inset

.
 Then for all sequences s in S, s has the same number of 1's and 0's by
 the strong inductive hypothesis, and S contains every good sequence generated
 by up to n applications of the constructor rule.
 
\end_layout

\begin_layout Standard
We want to now show that 
\begin_inset Formula $P(n+1)$
\end_inset

 follows.
 Let some good sequence generated from 
\begin_inset Formula $n+1$
\end_inset

 applications of the constructor rules upon the foundational rule be given,
 which we shall call 
\begin_inset Formula $s_{n+1}$
\end_inset

.
 Then 
\begin_inset Formula $s_{n+1}$
\end_inset

 was generated using some 2 elements in S using one of the constructor rules.
 We shall consider every possible construction of 
\begin_inset Formula $s_{n+1}$
\end_inset

:
\end_layout

\begin_layout Subsubsection*
Case 1:
\end_layout

\begin_layout Standard
Suppose that 
\begin_inset Formula $s_{n+1}$
\end_inset

 has the form 
\begin_inset Formula $0s1t$
\end_inset

 for some 
\begin_inset Formula $s,t\in S$
\end_inset

.
 
\end_layout

\begin_layout Standard
We know that s,t each have the same number of 0's, 1's.
 So lets say 
\begin_inset Formula $i_{s}$
\end_inset

 = # of 0's in s = # of 1's in s and 
\begin_inset Formula $i_{t}$
\end_inset

 = # of 0's in t = # of 1's in t.
 
\end_layout

\begin_layout Standard
Notice that the # of 0's in 
\begin_inset Formula $s_{n+1}$
\end_inset

 = the # of 0's in 
\begin_inset Formula $0s1t$
\end_inset

 = 1 + # of 0's in 
\begin_inset Formula $s$
\end_inset

 + 0 + # of 0s in t = 
\begin_inset Formula $1+i_{s}+i_{t}$
\end_inset

, since the number of 0's is additive across subsequences and the sequences
 0,1 clearly have 1,0 0's respectively.
 Furthermore, the # of 1's in 
\begin_inset Formula $s_{n+1}$
\end_inset

 = the # of 1's in 
\begin_inset Formula $0s1t$
\end_inset

 = 0 + # of 1's in 
\begin_inset Formula $s$
\end_inset

 + 1 + # of 1's in t = 
\begin_inset Formula $i_{s}+1+i_{t}$
\end_inset

, by similar logic.
 But clearly, 
\begin_inset Formula $1+i_{s}+i_{t}=i_{s}+1+i_{t}$
\end_inset

, so 
\begin_inset Formula $s_{n+1}$
\end_inset

 has the same number of 0's and 1's
\end_layout

\begin_layout Subsubsection*
Case 2: 
\end_layout

\begin_layout Standard
Suppose that 
\begin_inset Formula $s_{n+1}$
\end_inset

 has the form 
\begin_inset Formula $1s0t$
\end_inset

 for some 
\begin_inset Formula $s,t\in S$
\end_inset

.
 
\end_layout

\begin_layout Standard
Again, We know that s,t each have the same number of 0's, 1's.
 So lets say 
\begin_inset Formula $i_{s}$
\end_inset

 = # of 0's in s = # of 1's in s and 
\begin_inset Formula $i_{t}$
\end_inset

 = # of 0's in t = # of 1's in t.
 
\end_layout

\begin_layout Standard
Notice that the # of 0's in 
\begin_inset Formula $s_{n+1}$
\end_inset

 = the # of 0's in 
\begin_inset Formula $1s0t$
\end_inset

 = 0 + # of 0's in 
\begin_inset Formula $s$
\end_inset

 + 1 + # of 0s in t = 
\begin_inset Formula $i_{s}+1+i_{t}$
\end_inset

, again noting that the number of 0's is additive across subsequences.
 Furthermore, the # of 1's in 
\begin_inset Formula $s_{n+1}$
\end_inset

 = the # of 1's in 
\begin_inset Formula $1s0t$
\end_inset

 = 1 + # of 1's in 
\begin_inset Formula $s$
\end_inset

 + 0 + # of 1's in t = 
\begin_inset Formula $1+i_{s}+i_{t}$
\end_inset

, by similar logic.
 But clearly, 
\begin_inset Formula $1+i_{s}+i_{t}=i_{s}+1+i_{t}$
\end_inset

, so 
\begin_inset Formula $s_{n+1}$
\end_inset

 has the same number of 0's and 1's.
\end_layout

\begin_layout Standard
Overall, we have shown that 
\begin_inset Formula $s_{n+1}$
\end_inset

 has the same number of 0's and 1's.
 Because 
\begin_inset Formula $s_{n+1}$
\end_inset

 was any arbitrary good sequence generated from 
\begin_inset Formula $n+1$
\end_inset

 applications of the constructor rules upon the foundational rule, we have
 shown all good sequences generated by 
\begin_inset Formula $n+1$
\end_inset

 applications of the constructor rule have the same number of 0's and 1's.
 Whence, we have shown 
\begin_inset Formula $P(n+1)$
\end_inset

, from which it follows that 
\begin_inset Formula $\forall n\in\mathbb{N},P(n)$
\end_inset

 holds.
\end_layout

\begin_layout Section*
Problem 2
\end_layout

\begin_layout Subsection*
Part A
\end_layout

\begin_layout Standard
Let our loop invariant be: P(m) = on the 
\begin_inset Formula $m^{th}$
\end_inset

 iteration of the loop on line (2), 
\begin_inset Formula $0\leq i\leq n$
\end_inset

 and 
\begin_inset Formula $x\not\in A[0,(i-1)]$
\end_inset

.
\end_layout

\begin_layout Standard
First, lets consider the case that A is empty.
 Then 
\begin_inset Formula $n=0$
\end_inset

.
 Then, during the 0th iteration, 
\begin_inset Formula $i=0$
\end_inset

 and clearly, 
\begin_inset Formula $x\not\in A[0,-1]=[]$
\end_inset

.
 So then 
\begin_inset Formula $i=n$
\end_inset

, which means the loop at (2) is skipped entirely.
 Hence, the loop invariant holds (for the only iteration, 0).
\end_layout

\begin_layout Standard
Now we shall show induction on m in P(m), assuming that the array A is nonempty.
\end_layout

\begin_layout Standard

\series bold
Base case
\series default
 
\begin_inset Formula $P(0)$
\end_inset

: On the 0th iteration, the loop has iterated 0 times, so 
\begin_inset Formula $i=0$
\end_inset

 from line (1).
 Since we assumed A is nonempty, 
\begin_inset Formula $0\leq n$
\end_inset

, so 
\begin_inset Formula $0\leq i\leq n$
\end_inset

.
 Also, 
\begin_inset Formula $x\not\in A[0,0-1]=A[0,-1]=[]$
\end_inset

, the empty subarray.
 Hence, we have shown 
\begin_inset Formula $P(0)$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Inductive Hypothesis:
\series default
 Next, suppose that 
\begin_inset Formula $P(m)$
\end_inset

 for some 
\begin_inset Formula $m\in\mathbb{N}$
\end_inset

.
 That is, on the 
\begin_inset Formula $m^{th}$
\end_inset

 iteration, 
\begin_inset Formula $0\leq i\leq n$
\end_inset

 and 
\begin_inset Formula $x\not\in A[0,(i-1)]$
\end_inset

.
 We want to show 
\begin_inset Formula $P(m+1)$
\end_inset

.
 
\end_layout

\begin_layout Standard
If the 
\begin_inset Formula $m+1^{th}$
\end_inset

 iteration does not occur, then we are done.
 
\end_layout

\begin_layout Standard
So assume that the 
\begin_inset Formula $m+1^{th}$
\end_inset

 iteration occurs.
 Because this iteration occurs, we know that the equality on (2) was satisfied,
 so 
\begin_inset Formula $i<n$
\end_inset

.
 If the conditional on (3) was triggered, then the return statement is triggered
, so the loop does not complete.
 Because we are considering the case that this iteration completes, we can
 infer that this conditional is not satisfied, so 
\begin_inset Formula $x\neq A[i]$
\end_inset

.
 Since 
\begin_inset Formula $x\not\in A[0,(i-1)]$
\end_inset

 and 
\begin_inset Formula $x\not\in A[i]$
\end_inset

, then 
\begin_inset Formula $x\not\in A[0,i]$
\end_inset

.
 Furthermore, after (4), i is incremented to 
\begin_inset Formula $i+1$
\end_inset

.
 This completes the iteration of the loop.
 Since we know 
\begin_inset Formula $i<n$
\end_inset

 and both are integral values, then 
\begin_inset Formula $i+1\leq n$
\end_inset

; and clearly, 
\begin_inset Formula $0\leq i+1$
\end_inset

 since 
\begin_inset Formula $0\leq i$
\end_inset

.
 So overall, after the 
\begin_inset Formula $m+1^{th}$
\end_inset

 iteration, 
\begin_inset Formula $0\leq i+1\leq n$
\end_inset

 and 
\begin_inset Formula $x\not\in A[0,i]=A[0,(i+1)-1]$
\end_inset

.
 Hence, we have shown 
\begin_inset Formula $P(m+1)$
\end_inset

 and thus, overall, have shown that 
\begin_inset Formula $\forall m\in\mathbb{N},$
\end_inset

 the loop invariant 
\begin_inset Formula $P(m)$
\end_inset

 holds.
\end_layout

\begin_layout Subsection*
Part B
\end_layout

\begin_layout Subsubsection*
Partial correctness:
\end_layout

\begin_layout Standard
We assume that the program terminates and go on to show that whenever the
 program terminates, we get a correct solution.
 There are 2 possible case of termination:
\end_layout

\begin_layout Standard

\series bold
Case 1
\series default
: 
\end_layout

\begin_layout Standard
Suppose the program terminates at (5).
 Because we return -1, we want to show that 
\begin_inset Formula $x\not\in A[0,n-1]$
\end_inset

 (that is, x is not in the array A).
 Reaching (5) implies that the loop conditional was not satisfied after
 some 
\begin_inset Formula $k^{th}$
\end_inset

 iteration of the loop, with 
\begin_inset Formula $k\in\mathbb{N}$
\end_inset

.
 By our loop invariant, we know after that iteration, 
\begin_inset Formula $0\leq i\leq n$
\end_inset

 and 
\begin_inset Formula $x\not\in A[0,i-1]$
\end_inset

.
 Because the loop conditional was not satisfied, 
\begin_inset Formula $i\geq n$
\end_inset

 (since 
\begin_inset Formula $i\not<n$
\end_inset

).
 This implies that 
\begin_inset Formula $i=n,$
\end_inset

 from which it follows that 
\begin_inset Formula $x\not\in A[0,i-1]=A[0,n-1]$
\end_inset

.
 So 
\begin_inset Formula $x$
\end_inset

 is in fact not in the entire array.
 Whence, we have shown correctness when terminating at line (5).
\end_layout

\begin_layout Standard

\series bold
Case 2
\series default
: Suppose that the program terminates at line (3).
 That is, we return 
\begin_inset Formula $i$
\end_inset

.
 We want to show that 
\begin_inset Formula $i$
\end_inset

 is the smallest index such that 
\begin_inset Formula $x=A[i]$
\end_inset

.
 Reaching (3) implies that the if conditional was satisfied after some 
\begin_inset Formula $k^{th}$
\end_inset

 iteration of the loop, with 
\begin_inset Formula $k\in\mathbb{N}$
\end_inset

 (so we reach (3) on the 
\begin_inset Formula $k+1^{th}$
\end_inset

 [partial] iteration of the loop).
 After this 
\begin_inset Formula $k^{th}$
\end_inset

iteration, we know that 
\begin_inset Formula $0\leq i\leq n$
\end_inset

 and 
\begin_inset Formula $x\not\in A[0,i-1]$
\end_inset

.
 Again, because the if conditional was satisfied, we know that 
\begin_inset Formula $x=A[i]$
\end_inset

, which clearly shows 
\begin_inset Formula $x\in A[0,n-1]$
\end_inset

.
 Because 
\begin_inset Formula $x\not\in A[0,i-1]$
\end_inset

, we know that 
\begin_inset Formula $\forall j\in\mathbb{N}$
\end_inset

 with 
\begin_inset Formula $0\leq j\leq i-1$
\end_inset

, 
\begin_inset Formula $x\not=A[j]$
\end_inset

.
 That is, for all indices 
\begin_inset Formula $j$
\end_inset

 smaller than 
\begin_inset Formula $i$
\end_inset

 , 
\begin_inset Formula $A[j]\neq x$
\end_inset

.
 So clearly, 
\begin_inset Formula $i$
\end_inset

 is the smallest index satisfying 
\begin_inset Formula $x=A[i]$
\end_inset

.
\end_layout

\begin_layout Standard
Overall, we have shown that when the program terminates, we have a correct
 solution in either case.
\end_layout

\begin_layout Subsubsection*
Termination:
\end_layout

\begin_layout Standard
We know that 
\begin_inset Formula $i=0$
\end_inset

 and are given some 
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

, A, x.
 To prove termination, we can show that this loop always terminates in at
 most n iterations of the loop.
 I claim that after the 
\begin_inset Formula $m^{th}$
\end_inset

 iteration of the loop for any 
\begin_inset Formula $m\in\mathbb{N}$
\end_inset

, the program terminated or 
\begin_inset Formula $i=m$
\end_inset

.
 We shall use induction on 
\begin_inset Formula $m$
\end_inset

 in 
\begin_inset Formula $P(m)$
\end_inset

 := 
\begin_inset Formula $(i=m)$
\end_inset


\end_layout

\begin_layout Standard

\series bold
Base case
\series default
 
\begin_inset Formula $m=0$
\end_inset

: On the 0th iteration, 
\begin_inset Formula $i=0=m$
\end_inset

.
\end_layout

\begin_layout Standard

\series bold
Inductive hypothesis
\series default
: Let some 
\begin_inset Formula $k\in\mathbb{N}$
\end_inset

 be given.
 Assume 
\begin_inset Formula $P(k)$
\end_inset

.
 That is after the 
\begin_inset Formula $k^{th}$
\end_inset

 iteration, 
\begin_inset Formula $i=k$
\end_inset

 or the program terminated.
\end_layout

\begin_layout Standard
We now want to show that 
\begin_inset Formula $P(k+1)$
\end_inset

 holds.
 That is, the value of 
\begin_inset Formula $i$
\end_inset

, say 
\begin_inset Formula $i'$
\end_inset

, after the 
\begin_inset Formula $k+1^{th}$
\end_inset

 iteration satisfies 
\begin_inset Formula $i'=k+1$
\end_inset


\end_layout

\begin_layout Standard
If the 
\begin_inset Formula $k+1^{th}$
\end_inset

 iteration does not occur (including if the 
\begin_inset Formula $k^{th}$
\end_inset

 iteration terminated) or the program terminates on (3) of the 
\begin_inset Formula $k+1^{th}$
\end_inset

 loop, we are done.
 
\end_layout

\begin_layout Standard
Now suppose that the 
\begin_inset Formula $k+1^{th}$
\end_inset

 iteration does occur but does not terminate on (3).
 Then we know 
\begin_inset Formula $i=k$
\end_inset

 from the 
\begin_inset Formula $P(k)$
\end_inset

 (after all, the 
\begin_inset Formula $k^{th}$
\end_inset

 iteration did not terminate).
 During the 
\begin_inset Formula $k+1^{th}$
\end_inset

 iteration, line (3) does not change the value of 
\begin_inset Formula $i$
\end_inset

, so we can ignore it.
 Note that we will not trigger (3) by our assumption that the 
\begin_inset Formula $k+1$
\end_inset

 iteration does not terminate here.
 Then, in line (4), 
\begin_inset Formula $i$
\end_inset

 is incremented by 
\begin_inset Formula $i$
\end_inset

, and since 
\begin_inset Formula $i=k$
\end_inset

, 
\begin_inset Formula $i'=i+1=k+1$
\end_inset

 is the value after the 
\begin_inset Formula $k+1^{th}$
\end_inset

 iteration, as expected.
 Hence, we have shown by induction that after the 
\begin_inset Formula $k^{th}$
\end_inset

 iteration, 
\begin_inset Formula $i=k$
\end_inset

 or the program terminated.
\end_layout

\begin_layout Standard
To utilize this lengthy theorem, first note that if the loop terminates
 on the 
\begin_inset Formula $m^{th}$
\end_inset

 iteration for some 
\begin_inset Formula $m\leq n$
\end_inset

 (here, we expect termination on (3), but that doesn't explicitly matter),
 we are done.
 So consider the case that 
\begin_inset Formula $\forall m\in\mathbb{N}$
\end_inset

 with 
\begin_inset Formula $m\leq n$
\end_inset

, the 
\begin_inset Formula $m^{th}$
\end_inset

 iteration does not terminate.
 Then, after the 
\begin_inset Formula $n^{th}$
\end_inset

 iteration, we know that 
\begin_inset Formula $i=n$
\end_inset

 after the loop completes.
 So then the loop conditional, 
\begin_inset Formula $i=n\not<n$
\end_inset

 is not satisfied, and the loop is completed, causing the program to terminate
 on (5).
 Ennumerating all cases, this shows that the program always terminates in
 at most 
\begin_inset Formula $n$
\end_inset

 (a finite number) iterations.
 
\end_layout

\end_body
\end_document
