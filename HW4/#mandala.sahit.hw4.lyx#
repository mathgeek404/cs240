#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
Problem 1
\end_layout

\begin_layout Standard
P(n) = 
\begin_inset Formula $\forall$
\end_inset

 good sequences generated from n applications of the constructor rules upon
 the foundational rule, the number of 0's in the string equals the number
 of 1's
\end_layout

\begin_layout Standard
Note that 
\begin_inset Formula $P(0)=\{\}$
\end_inset

, the empty sequence.
\end_layout

\begin_layout Standard
We shall prove 
\begin_inset Formula $\forall n\in\mathbb{N},P(n)$
\end_inset

 using strong structural induction.
\end_layout

\begin_layout Standard
Base case 
\begin_inset Formula $P(0)$
\end_inset

: At iteration 0, the only sequence to consider is the empty sequence, which
 we know is good by the foundational rule.
 Note that the number of 0's is 0 and the number of 1's is 0, so clearly
 the number of 0's and 1's are equal.
 Hence, we have shown the base case 
\begin_inset Formula $P(n)$
\end_inset

 at 
\begin_inset Formula $n=0$
\end_inset

.
\end_layout

\begin_layout Standard
Next, assume the strong inductive hypothesis: Given some 
\begin_inset Formula $n\in\mathbb{N}$
\end_inset

, 
\begin_inset Formula $\forall k\in\mathbb{N}$
\end_inset

 s.t.
 
\begin_inset Formula $x\leq n$
\end_inset

, 
\begin_inset Formula $P(k)$
\end_inset

.
 That is, every good sequence generated by 
\begin_inset Formula $k$
\end_inset

 iterations of the constructor rule, with 
\begin_inset Formula $\forall k\in\mathbb{N}$
\end_inset

 s.t.
 
\begin_inset Formula $x\leq n$
\end_inset

, has the same number of 1's and 0's.
 Let us define the set S of all good sequences generated by some 
\begin_inset Formula $m\in\mathbb{N}$
\end_inset

 applications of the constructor rule, with 
\begin_inset Formula $m\leq n$
\end_inset

.
 Then for all sequences s in S, s has the same number of 1's and 0's by
 the inductive hypothesis, and S contains every good sequence generated
 by up to n applications of the constructor rule.
 
\end_layout

\begin_layout Standard
We want to now show that 
\begin_inset Formula $P(n+1)$
\end_inset

 follows.
 Let some good sequence generated from 
\begin_inset Formula $n+1$
\end_inset

 applications of the constructor rules upon the foundational rule be given,
 which we shall call 
\begin_inset Formula $s_{n+1}$
\end_inset

.
 Then by the constructor rule, 
\begin_inset Formula $s_{n+1}$
\end_inset

 was generated using some 2 elements in S using the rules in the constructor
 rule.
 We shall consider every possible constructor of 
\begin_inset Formula $s_{n+1}$
\end_inset

:
\end_layout

\begin_layout Standard
Case 1.
 Suppose that 
\begin_inset Formula $s_{n+1}$
\end_inset

 has the form 
\begin_inset Formula $0s1t$
\end_inset

 for some 
\begin_inset Formula $s,t\in S$
\end_inset

.
 We know that s,t each have the same number of 0's, 1's.
 So lets say 
\begin_inset Formula $i_{s}$
\end_inset

 = # of 0's in s = # of 1's in s and 
\begin_inset Formula $i_{t}$
\end_inset

 = number of 0's in t = number of 1's in t.
 Notice that the number of 0's in 
\begin_inset Formula $s_{n+1}$
\end_inset

 = the number of 0's in 
\begin_inset Formula $0s1t$
\end_inset

 = 1 + #
\end_layout

\end_body
\end_document
